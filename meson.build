project ('elf', [ 'cpp' ],
         version: '0.1',
         default_options : [ 'cpp_std=c++11' ])

version = run_command ('make-version')
elf = executable ('elf',
                  [ 'elf.cc',
                    'elf-operation.cc',
                    'elf-parser.cc',
                    'elf-runner.cc',
                    'elf-token.cc',
                    'x86_64.cc',
                  ],
                  cpp_args: [ '-DVERSION="@0@"'.format (version.stdout ().strip ()) ],
                  install: true)

test_runner = executable ('test-runner',
                          [ 'test-runner.cc',
                          ])

tests = [ 'empty-file',
          'bool-variable',
          'bool-variable-constant-false',
          'bool-variable-constant-true',
          'uint8-variable',
          'uint8-variable-constant',
          'uint16-variable',
          'uint16-variable-constant',
          'uint32-variable',
          'uint32-variable-constant',
          'uint64-variable',
          'uint64-variable-constant',
          'utf8-variable',
          'utf8-variable-constant',
          'utf8-constant-single-quotes',
          'utf8-constant-double-quotes',
          'utf8-constant-escape-backslash',
          'utf8-constant-escape-single-quote',
          'utf8-constant-escape-double-quote',
          'utf8-constant-escape-tab',
          'utf8-constant-escape-line-feed',
          'utf8-constant-escape-carriage-return',
          'utf8-constant-escape-hex',
          'utf8-constant-escape-unicode',
          'add',
          'subtract',
          'multiply',
          'utf8-add',
          'if-true',
          'if-false',
          'if-true-else',
          'if-false-else',
          'while',
          'function-call',
          'function-return-uint8-constant',
          'function-return-uint8-parameter',
          'function-return-uint16-constant',
          'function-return-uint16-parameter',
          'function-return-uint32-constant',
          'function-return-uint32-parameter',
          'function-return-uint64-constant',
          'function-return-uint64-parameter',
          'function-return-utf8-constant',
          'function-return-utf8-parameter',
          'assert-true',
          'assert-false',
        ]
foreach test : tests
  test (test, test_runner, args : [ elf.full_path (), '@0@/tests/@1@.elf'.format (meson.current_source_dir (), test) ])
endforeach
